{"version":3,"sources":["App.js","index.js"],"names":["App","apiUrl","apiKey","favoritesLengthGoal","state","search","isLoading","movies","favorites","updateSearchTerm","value","setState","axios","get","this","then","response","data","catch","console","log","movie","index","favoritesCopy","splice","map","m","includes","length","window","location","href","Page","title","subtitle","Layout","Section","Card","Autocomplete","TextField","onChange","label","prefix","Icon","source","SearchMinor","color","placeholder","oneHalf","getSearchResultTitle","sectioned","Spinner","accessibilityLabel","size","List","type","i","Item","key","Stack","spacing","alignment","TextContainer","Button","onClick","selectMovie","disabled","checkIfIsSelected","favoritesIsFull","Banner","unselectMovie","FooterHelp","Link","url","Component","WrappedApp","AppProvider","i18n","enTranslations","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.391b4587.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Autocomplete, Icon, Button, Banner, Stack, TextContainer, List, Page, Layout, Card, Spinner, FooterHelp, Link } from '@shopify/polaris';\nimport { SearchMinor } from '@shopify/polaris-icons';\n\nclass App extends Component {\n\n  apiUrl = 'https://www.omdbapi.com/?type=movie';\n  apiKey = '449289f';\n  favoritesLengthGoal = 5;\n\n  state = {\n    search: '',\n    isLoading: false,\n    movies: [],\n    favorites: [],\n  }\n\n  search() {\n    axios.get(`${this.apiUrl}&s=${this.state.search}&apikey=${this.apiKey}`)\n    .then((response) => {\n      if (response.data['Response'] === 'True') {\n        this.setState({ movies: response.data['Search'], isLoading: false});\n      } else {\n        this.setState({ movies: [], isLoading: false});\n      }\n    })\n    .catch(console.log)\n  }\n\n  updateSearchTerm = (value) => {\n    this.setState({ search: value, isLoading: true }, () => this.search());\n  }\n\n  selectMovie(movie) {\n    this.setState({ favorites: [...this.state.favorites, movie] })\n  }\n\n  unselectMovie(index) {\n    var favoritesCopy = this.state.favorites;\n    favoritesCopy.splice(index, 1);\n    this.setState({ favorites: favoritesCopy})\n  }\n\n  checkIfIsSelected(movie) {\n    return this.state.favorites.map((m) => m[\"imdbID\"]).includes(movie[\"imdbID\"]);\n  }\n\n  favoritesIsFull() {\n    return this.state.favorites.length === this.favoritesLengthGoal;\n  }\n\n  componentDidMount() {\n    console.log(window.location.href);\n  }\n\n  getSearchResultTitle() {\n    return `Results for \"${this.state.search}\"`\n  }\n\n  render() {\n    return (\n      <Page\n        title=\"The Shoppies\"\n        subtitle=\"by Alexander Zenner\">\n        <Layout>\n          <Layout.Section>\n            <Card>\n              <Card.Section>\n              <Autocomplete.TextField\n                onChange={this.updateSearchTerm}\n                label=\"Movie title\"\n                value={this.state.search}\n                prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n                placeholder=\"Search\"\n              />\n              </Card.Section>\n            </Card>\n          </Layout.Section>\n          <Layout.Section oneHalf>\n            <Card title={this.getSearchResultTitle()} sectioned>\n            {\n              this.state.isLoading && \n              <Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"teal\" />\n            }\n            <List type=\"bullet\">\n              {this.state.movies.map((movie, i) => (\n                <List.Item key={i}>\n                  <Stack spacing=\"extraTight\" alignment=\"center\">\n                    <TextContainer>\n                      {movie[\"Title\"]} ({movie[\"Year\"]}) \n                    </TextContainer>\n                    <Button size=\"slim\" onClick={() => this.selectMovie(movie)} disabled={this.checkIfIsSelected(movie) || this.favoritesIsFull()}>Nominate</Button>\n                  </Stack>\n                </List.Item>\n              ))}\n            </List>\n            </Card>\n          </Layout.Section>\n          <Layout.Section oneHalf>\n            <Card title=\"Nominations\" sectioned>\n              <TextContainer>\n              {\n                this.favoritesIsFull() &&\n                <Banner>\n                  <p>You've completed your {this.favoritesLengthGoal} nominations</p>\n                </Banner>\n              }\n              <List type=\"bullet\">\n                {this.state.favorites.map((movie, i) => (\n                  <List.Item key={i}>\n                    <Stack spacing=\"extraTight\" alignment=\"center\">\n                      <TextContainer>\n                        {movie[\"Title\"]} ({movie[\"Year\"]})\n                      </TextContainer>\n                      <Button size=\"slim\" onClick={() => this.unselectMovie(i)}>Remove</Button>\n                    </Stack>\n                  </List.Item>\n                ))}\n              </List>\n              </TextContainer>\n            </Card>\n          </Layout.Section>\n        </Layout>\n        <FooterHelp>\n          Find the code and my notes in my <Link url=\"https://github.com/alexanderzenner/shoppies\">\n            GitHub repository\n          </Link>\n        </FooterHelp>\n      </Page>\n    );\n  }  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@shopify/polaris/dist/styles.css';\nimport {AppProvider} from '@shopify/polaris';\nimport enTranslations from '@shopify/polaris/locales/en.json';\nimport App from './App';\n\nfunction WrappedApp() {\n  return (\n    <AppProvider i18n={enTranslations}>\n      <App />\n    </AppProvider>\n  );\n}\n\nReactDOM.render(<WrappedApp />, document.getElementById('root'));\n"],"sourceRoot":""}